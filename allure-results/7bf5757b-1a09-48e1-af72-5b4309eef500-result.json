{"name": "test_smena_pr", "status": "broken", "statusDetails": {"message": "NameError: name 'cycle' is not defined", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"70ae9da5-95cd-4bd6-bf2a-bbeca2a44996\")>, file_data = [{'balance': 2500, 'cycle': 'day', 'default': 'no', 'market': 'SCH', ...}]\napp_pages = <tests.conftest.app_pages.<locals>.Pages object at 0x000002615A898C20>\n\n    @allure.feature(\"Тестирование тарифа UP\")\n    def test_smena_pr(driver, file_data, app_pages):\n        \"\"\"\n        Запускает тесты на основе данных из файла.\n        \"\"\"\n        # for row in file_data:\n        #     execute_scenario(driver, row, app_pages)\n    \n        for row in file_data:\n>           process_tariff_changes(driver, row, app_pages)\n\ntest_app_android\\project\\tests\\test.py:275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"70ae9da5-95cd-4bd6-bf2a-bbeca2a44996\")>, row = {'balance': 2500, 'cycle': 'day', 'default': 'no', 'market': 'SCH', ...}\napp_pages = <tests.conftest.app_pages.<locals>.Pages object at 0x000002615A898C20>\n\n    def process_tariff_changes(driver, row, app_pages):\n    \n        test_plan = TestChangePlan(row, app_pages)\n        # Проверка смены тарифного плана (ТП)\n        if row['old_tariff_soc'] != row['new_tariff_soc']:\n            with allure.step(f'Тест-кейс: смена тарифа \"{row['new_tariff_name']}\"'):\n                if row['balance'] <= 200:\n                    allure.step(f'Кейс: смена тарифа при недостаточности средств')\n                else:\n                    allure.step(f'Кейс: смена тарифа при параметрах: дефолт ({row[\"default\"]})\", ГБ ({row[\"new_gb_value\"]}), Минуты ({row[\"new_min_value\"]}), АП ({row[\"new_tariff_price\"]}), ДТМ ({row[\"new_options_name\"]} ,{row[\"new_options_price\"]})')\n                #Переход на страницу смены тарифа\n                test_plan.test_go_new_tariff()\n                #Выбираем тариф\n                test_plan.test_select_tariff(app_pages)\n                #Выбираем гб и минуты, если пресеты не дефолтные\n                if row['default'] == 'no':\n                    test_plan.test_select_data()\n                    test_plan.test_select_voice()\n    \n                #Проверка ДТМ (цена/подключение опции)\n                if not pd.isna(row['new_options_price']):\n                    if row['new_options_price'] > 0:\n                        test_plan.test_select_dtm(status = \"on\")\n                    else:\n                        test_plan.test_dtm_price()\n                #Проверка итоговой цены за тариф и переход далее\n                if row['old_tariff_soc'] == row['new_tariff_soc']:\n                    test_plan.test_tariff_price(name = 'Продолжить')\n                else:\n                    test_plan.test_tariff_price(name = 'подключить')\n                #Проверка предчека и переход далее\n                if not pd.isna(row['old_options_name']):\n                    test_plan.test_precheck(old_dtm_name = 1, changing_tariff = None)\n                #Проверка чека\n                #Проверка в чеке описания изменений тарифа (Текс/цена)\n                test_plan.test_check_mobile_price(text_part = '₽/мес')\n                #Проверка дтм опции в чеке (Имя/цена)\n                if not pd.isna(row['new_options_price']):\n                    test_plan.test_check_dtm(price = 1, text_part = '₽/мес', cycle= 'm')\n                #Проверка разового платежа за смену тарифа\n                test_plan.test_single_payment()\n                #Проверка цены на кнопке оплатить и переход далее\n                price = row['new_tariff_price']\n                payment = 200\n                test_plan.test_check_price(payment, price, cycle= 'm')\n                test_plan.test_button_pay_click()\n                if row['balance'] <= 200:\n                    #Проверка при недостаточности средств\n                    test_plan.test_low_balance_page()\n                else:\n                    #Проверка экрана успеха и переход далее (возврат на главный экран)\n                    test_plan.test_success_page()\n                    test_plan.test_status_button_understand_click()\n                    test_plan.test_go_main()\n                    #Ожидание изменения тарифа на главном экране\n                    if row['new_gb_value'] > 0:\n                        param = 1 #проверяем по гб\n                    elif row['new_min_value'] > 0:\n                        param = 2 #проверяем по минутам\n                    else:\n                        param = 3   #проверяем по АП\n                    test_plan.test_wait_tariff(param, cycle= 'm')\n                    #Проверка данных тарифа поле подключения\n                    test_plan.test_ap_tariff(cycle= 'm')\n                    if row['new_gb_value'] > 0:\n                        test_plan.test_gb_tariff()\n                    if row['new_min_value'] > 0:\n                        test_plan.test_min_tariff()\n                    test_plan.test_name_tariff()\n                    test_plan.test_date_tariff()\n    \n        # Проверка смены пресета\n        elif row['old_tariff_soc'] == row['new_tariff_soc']:\n            if (row['old_gb_value'] != row['new_gb_value']) or (row['old_min_value'] != row['new_min_value']):\n                with allure.step(f'Тест-кейс: смена пресета \"{row['new_tariff_name']}\"'):\n                    #Переходим в карточку тарифа\n                    test_plan.test_go_settings_tariff()\n                    #Подключаем ГБ и МИН если необходимо\n                    if row['old_gb_value'] != row['new_gb_value']:\n                        test_plan.test_select_data()\n                    if row['old_min_value'] != row['new_min_value']:\n                        test_plan.test_select_voice()\n                    #Проверка ДТМ (цена/подключение опции)\n                    if not pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n                        if row['new_options_price'] > row['old_options_price']:\n                            test_plan.test_select_dtm(status = \"on\")\n                        else:\n                            test_plan.test_dtm_price()\n                    elif pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n                        if row['new_options_price'] > 0:\n                            test_plan.test_select_dtm(status = \"on\")\n                        else:\n                            test_plan.test_dtm_price()\n                    elif not pd.isna(row['old_options_price']) and pd.isna(row['new_options_price']):\n                        test_plan.test_select_dtm(status = \"off\")\n                    #Проверка итоговой цены за тариф и переход далее\n                    if row['old_tariff_soc'] == row['new_tariff_soc']:\n                        test_plan.test_tariff_price(name = 'Продолжить')\n                    else:\n                        test_plan.test_tariff_price(name = 'подключить')\n                    #Проверка предчека и переход далее\n                    if (not pd.isna(row['old_options_name']) and pd.isna(row['new_options_name'])) and (row['old_gb_value'] > row['new_gb_value']):\n                        test_plan.test_precheck(old_dtm_name = 1, changing_tariff = 1)\n                    else:\n                        test_plan.test_precheck(old_dtm_name = None, changing_tariff = 1)\n                    #Проверка описания изменений тарифа (Текс/цена)\n                    if (row['new_gb_value'] <= row['old_gb_value']) and (row['new_min_value'] <= row['old_min_value']):\n                        test_plan.test_check_text(text_part = '₽')\n                    else:\n                        test_plan.test_check_mobile_price(text_part = '₽')\n                    #Проверка дтм опции в чеке (Имя/цена)\n                    if not pd.isna(row['old_options_price']) and pd.isna(row['new_options_price']) and (row['old_gb_value'] < row['new_gb_value']):\n                        test_plan.test_check_dtm(price = None, text_part = '₽', cycle= 'm')\n                    elif (pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price'])) or (row['old_options_price'] < row['new_options_price']):\n                        test_plan.test_check_dtm(price = 1, text_part = '₽', cycle= 'm')\n                    test_plan.test_check_info(cycle= 'm')\n                    #Проверка цены на кнопке оплатить и переход далее\n                    if (row['new_gb_value'] <= row['old_gb_value'] and row['new_min_value'] < row['old_min_value']) and pd.isna(row['new_options_price']):\n                        test_plan.test_button_save_click()\n                    else:\n                        price = row['new_tariff_price'] - row['old_tariff_price']\n                        if price < 0:\n                            price = 0\n                        payment = 0\n                        test_plan.test_check_price(payment, price, cycle= 'm')\n                        test_plan.test_button_pay_click()\n                    #Проверка экрана успеха и переход далее (возврат на главный экран)\n                    test_plan.test_success_page()\n                    test_plan.test_status_button_understand_click()\n                    test_plan.test_go_main()\n                    #Ожидание изменения тарифа на главном экране\n                    if row['new_gb_value'] > 0:\n                        param = 1 #проверяем по гб\n                    elif row['new_min_value'] > 0:\n                        param = 2 #проверяем по минутам\n                    else:\n                        param = 3   #проверяем по АП\n                    test_plan.test_wait_tariff(param, cycle= 'm')\n                    #Проверка данных тарифа поле подключения\n                    test_plan.test_ap_tariff(cycle= 'm')\n                    if row['new_gb_value'] > 0:\n                        test_plan.test_gb_tariff()\n                    if row['new_min_value'] > 0:\n                        test_plan.test_min_tariff()\n                    test_plan.test_name_tariff()\n                    test_plan.test_date_tariff()\n            else:\n                with allure.step(f'Тест-кейс: подключение услуги \"{row['new_options_name']}\"'):\n                    # #Переходим в карточку тарифа\n                    # test_plan.test_go_settings_tariff()\n                    # #Проверка ДТМ (цена/подключение опции)\n                    # if not pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n                    #     if row['new_options_price'] > row['old_options_price']:\n                    #         test_plan.test_select_dtm(status = \"on\")\n                    #     else:\n                    #         test_plan.test_dtm_price()\n                    # elif pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n                    #     if row['new_options_price'] > 0:\n                    #         test_plan.test_select_dtm(status = \"on\")\n                    #     else:\n                    #         test_plan.test_dtm_price()\n                    # elif not pd.isna(row['old_options_price']) and pd.isna(row['new_options_price']):\n                    #     test_plan.test_select_dtm(status = \"off\")\n                    # #Проверка итоговой цены за тариф и переход далее\n                    # if row['old_tariff_soc'] == row['new_tariff_soc']:\n                    #     test_plan.test_tariff_price(name = 'Продолжить')\n                    # else:\n                    #     test_plan.test_tariff_price(name = 'подключить')\n                    # #Проверка дтм опции в чеке (Имя/цена)\n                    # if row['cycle'] == 'month':\n                    #     cycle = 'm'\n                    # else:\n                    #     cycle = 'd'\n                    # if not pd.isna(row['old_options_price']) and pd.isna(row['new_options_price']):\n                    #     price = None\n                    #     text_part = '₽'\n                    #     test_plan.test_check_dtm(price , text_part , cycle)\n                    # elif (pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price'])) or (row['old_options_price'] < row['new_options_price']):\n                    #     price = 1\n                    #     text_part = '₽'\n                    #     test_plan.test_check_dtm(price , text_part , cycle)\n                    # if not pd.isna(row['new_options_price']):\n                    #     test_plan.test_check_info(cycle)\n                    # #Проверка цены на кнопке оплатить и переход далее\n                    # if not pd.isna(row['old_options_name']) and pd.isna(row['new_options_name']):\n                    #     test_plan.test_button_save_click()\n                    # else:\n                    #     price = 0\n                    #     payment = 0\n                    #     test_plan.test_check_price(payment, price, cycle)\n                    #     test_plan.test_button_pay_click()\n                    # #Проверка экрана успеха и переход далее (возврат на главный экран)\n                    # test_plan.test_success_page()\n                    # test_plan.test_status_button_understand_click()\n                    # test_plan.test_go_main()\n                    # #Ожидание изменения тарифа на главном экране\n                    # param = 3   #проверяем по АП\n                    # test_plan.test_wait_tariff(param, cycle)\n                    # #Проверка данных тарифа поле подключения\n>                   test_plan.test_ap_tariff(cycle)\nE                   NameError: name 'cycle' is not defined\n\ntest_app_android\\project\\tests\\test.py:477: NameError"}, "description": "\nЗапускает тесты на основе данных из файла.\n", "steps": [{"name": "Тест-кейс: подключение услуги \"Сервисы Яндекс\"", "status": "broken", "statusDetails": {"message": "NameError: name 'cycle' is not defined\n", "trace": "  File \"C:\\Users\\verli\\IdeaProjects\\AppBee\\test_app_android\\project\\tests\\test.py\", line 477, in process_tariff_changes\n    test_plan.test_ap_tariff(cycle)\n                             ^^^^^\n"}, "start": 1736777197611, "stop": 1736777197611}], "start": 1736777197610, "stop": 1736777197612, "uuid": "2daeded0-327a-4b51-9916-4295491f55a1", "historyId": "7e317dec957f8d84ca3cc6ce5c1ea4ff", "testCaseId": "7e317dec957f8d84ca3cc6ce5c1ea4ff", "fullName": "test_app_android.project.tests.test#test_smena_pr", "labels": [{"name": "feature", "value": "Тестирование тарифа UP"}, {"name": "parentSuite", "value": "test_app_android.project.tests"}, {"name": "suite", "value": "test"}, {"name": "host", "value": "DESKTOP-G72BB0H"}, {"name": "thread", "value": "22644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_app_android.project.tests.test"}]}