{"name": "test_smena_pr", "status": "broken", "statusDetails": {"message": "NameError: name 'gb' is not defined", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"ae228564-5f66-4312-9f95-d607e2c9c7bc\")>, file_data = [{'balance': 2000, 'default': 'no', 'market': 'SCH', 'new_gb_soc': nan, ...}]\napp_pages = <tests.conftest.app_pages.<locals>.Pages object at 0x0000029622CEA3C0>\n\n    @allure.feature(\"Тестирование тарифа UP\")\n    def test_smena_pr(driver, file_data, app_pages):\n        \"\"\"\n        Запускает тесты на основе данных из файла.\n        \"\"\"\n        # for row in file_data:\n        #     execute_scenario(driver, row, app_pages)\n    \n        for row in file_data:\n>           process_tariff_changes(driver, row, app_pages)\n\ntest_app_android\\project\\tests\\test.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"ae228564-5f66-4312-9f95-d607e2c9c7bc\")>, row = {'balance': 2000, 'default': 'no', 'market': 'SCH', 'new_gb_soc': nan, ...}\napp_pages = <tests.conftest.app_pages.<locals>.Pages object at 0x0000029622CEA3C0>\n\n    def process_tariff_changes(driver, row, app_pages):\n    \n        test_plan = TestChangePlan(row, app_pages)\n        # Проверка смены тарифного плана (ТП)\n        if row['old_tariff_soc'] != row['new_tariff_soc']:\n            test_plan.test_go_settings_tariff()\n    \n            if row['default'] == 'no':\n                test_plan.test_select_data()\n                test_plan.test_select_voice()\n    \n            # # Проверка цен опций при смене ТП\n            # if not pd.isna(row['new_options_price']):\n            #     steps.append('Проверка цены опции')\n            #     if row['new_options_price'] > 0:\n            #         steps.append('Подключение опции')\n    \n            # # Если ни ГБ, ни минуты не увеличиваются, сохраняем изменения\n            # if row['old_gb_value'] >= row['new_gb_value'] and row['old_min_value'] >= row['new_min_value'] \\\n            #         and pd.isna(row['new_options_price']):\n            #     steps.append('Сохранить изменения')\n    \n        # Проверка смены пресета\n        elif row['old_tariff_soc'] == row['new_tariff_soc'] and (row['old_gb_value'] != row['new_gb_value'] or row['old_min_value'] != row['new_min_value']):\n            # #Переходим в карточку тарифа\n            # test_plan.test_go_settings_tariff()\n            # #Подключаем ГБ и МИН если необходимо\n            # if row['old_gb_value'] != row['new_gb_value']:\n            #     test_plan.test_select_data()\n            # if row['old_min_value'] != row['new_min_value']:\n            #     test_plan.test_select_voice()\n            # #Проверка ДТМ (цена/подключение опции)\n            # if not pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n            #     if row['new_options_price'] > row['old_options_price']:\n            #         test_plan.test_select_dtm()\n            #     else:\n            #         test_plan.test_dtm_price()\n            # elif pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price']):\n            #     if row['new_options_price'] > 0:\n            #         test_plan.test_select_dtm()\n            #     else:\n            #         test_plan.test_dtm_price()\n            # #Проверка итоговой цены за тариф и переход далее\n            # test_plan.test_tariff_price()\n            # #Проверка предчека и переход далее\n            # if not pd.isna(row['old_options_name']) and pd.isna(row['new_options_name']):\n            #     test_plan.test_precheck(old_dtm_name = row['old_options_name'], changing_tariff = 1)\n            # else:\n            #     test_plan.test_precheck(old_dtm_name = None, changing_tariff = 1)\n            # #Проверка описания изменений тарифа (Текс/цена)\n            # if (row['new_gb_value'] <= row['old_gb_value']) and (row['new_min_value'] <= row['old_min_value']):\n            #     test_plan.test_check_text()\n            # else:\n            #     test_plan.test_check_mobile_price()\n            # #Проверка дтм опции в чеке (Имя/цена)\n            # if not pd.isna(row['old_options_price']) and pd.isna(row['new_options_price']):\n            #     test_plan.test_check_dtm(price = None)\n            # elif (pd.isna(row['old_options_price']) and not pd.isna(row['new_options_price'])) or (row['old_options_price'] < row['new_options_price']):\n            #     test_plan.test_check_dtm(price = 1)\n            # test_plan.test_check_info()\n            # #Проверка цены на кнопке оплатить и переход далее\n            # if (row['new_gb_value'] <= row['old_gb_value'] and row['new_min_value'] < row['old_min_value']) and pd.isna(row['new_options_price']):\n            #     test_plan.test_button_save_click()\n            # else:\n            #     test_plan.test_check_price()\n            #     test_plan.test_button_pay_click()\n            # #Проверка экрана успеха и переход далее (возврат на главный экран)\n            # test_plan.test_success_page()\n            # test_plan.test_success_button_understand_click()\n            # test_plan.test_go_main()\n            # #Ожидание изменения тарифа на главном экране\n            if row['new_gb_value'] > 0:\n>               param = gb\nE               NameError: name 'gb' is not defined\n\ntest_app_android\\project\\tests\\test.py:316: NameError"}, "description": "\nЗапускает тесты на основе данных из файла.\n", "start": 1735287504101, "stop": 1735287504102, "uuid": "1e5311c1-5131-4f20-93de-681fa3dc9ebd", "historyId": "7e317dec957f8d84ca3cc6ce5c1ea4ff", "testCaseId": "7e317dec957f8d84ca3cc6ce5c1ea4ff", "fullName": "test_app_android.project.tests.test#test_smena_pr", "labels": [{"name": "feature", "value": "Тестирование тарифа UP"}, {"name": "parentSuite", "value": "test_app_android.project.tests"}, {"name": "suite", "value": "test"}, {"name": "host", "value": "DESKTOP-G72BB0H"}, {"name": "thread", "value": "8736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_app_android.project.tests.test"}]}